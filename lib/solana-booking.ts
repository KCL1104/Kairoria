import { 
  Connection, 
  PublicKey, 
  Transaction, 
  SystemProgram,
  LAMPORTS_PER_SOL 
} from '@solana/web3.js'
// Note: These imports will be available after npm install
// import { 
//   getAssociatedTokenAddress, 
//   TOKEN_PROGRAM_ID,
//   ASSOCIATED_TOKEN_PROGRAM_ID 
// } from '@solana/spl-token'
// import { BN, Program, AnchorProvider, Idl, web3 } from '@coral-xyz/anchor'

// Temporary placeholders until packages are installed
const TOKEN_PROGRAM_ID = new PublicKey('TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA')
const ASSOCIATED_TOKEN_PROGRAM_ID = new PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL')

// Placeholder for getAssociatedTokenAddress - will be replaced after npm install
async function getAssociatedTokenAddress(mint: PublicKey, owner: PublicKey, allowOwnerOffCurve = false) {
  // This is a simplified version - real implementation will come from @solana/spl-token
  const [address] = PublicKey.findProgramAddressSync(
    [owner.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],
    ASSOCIATED_TOKEN_PROGRAM_ID
  )
  return address
}

// Kairoria Rental Program ID - use lazy initialization
export const getKairoriaProgram = () => {
  return new PublicKey(
    process.env.NEXT_PUBLIC_KAIRORIA_PROGRAM_ID || 'HczADmDQ7CSAQCjLnixgXHiJWg31ToAMKnyzamaadkbY'
  )
}

// USDC Mint Address (Network dependent)
export const getUSDCMint = () => {
  const network = process.env.NEXT_PUBLIC_SOLANA_NETWORK || 'devnet'
  if (network === 'mainnet') {
    return new PublicKey(process.env.NEXT_PUBLIC_USDC_MINT_MAINNET || 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v')
  }
  return new PublicKey(process.env.NEXT_PUBLIC_USDC_MINT_DEVNET || '4zMMC9srt5Ri5X14GAgXhaHii3GnPAEERYPJgZJDncDU')
}

// Use lazy initialization for USDC mint
export const getUSDCMintSingleton = (() => {
  let mint: PublicKey | null = null
  return () => {
    if (!mint) {
      mint = getUSDCMint()
    }
    return mint
  }
})()

// Platform admin address - use lazy initialization
export const getPlatformAdmin = () => {
  return new PublicKey(
    process.env.NEXT_PUBLIC_KAIRORIA_ADMIN_WALLET || '3Jcx1Ntm4DBpkg9VRuLPrecU5C2XmdoSeqCDTkg1K91D'
  )
}

// Solana RPC Connection
export const getSolanaConnection = () => {
  const rpcUrl = process.env.NEXT_PUBLIC_SOLANA_RPC_URL || 'https://api.devnet.solana.com'
  return new Connection(rpcUrl, 'confirmed')
}

/**
 * Generate PDA for rental transaction
 */
export function getRentalTransactionPDA(
  productId: number,
  renterPublicKey: PublicKey,
  programId?: PublicKey
): [PublicKey, number] {
  const programIdToUse = programId || getKairoriaProgram()
  const productIdBuffer = Buffer.alloc(8)
  productIdBuffer.writeBigUInt64LE(BigInt(productId), 0)
  
  return PublicKey.findProgramAddressSync(
    [
      Buffer.from('rental_transaction'),
      productIdBuffer,
      renterPublicKey.toBuffer(),
    ],
    programIdToUse
  )
}

/**
 * Generate PDA for global state
 */
export function getGlobalStatePDA(programId?: PublicKey): [PublicKey, number] {
  const programIdToUse = programId || getKairoriaProgram()
  return PublicKey.findProgramAddressSync(
    [Buffer.from('global_state')],
    programIdToUse
  )
}

/**
 * Create rental transaction instruction
 */
export async function createRentalTransactionInstruction(
  connection: Connection,
  renterPublicKey: PublicKey,
  productId: number,
  ownerWallet: PublicKey,
  totalAmount: number,
  rentalStart: number,
  rentalEnd: number,
  bookingId: string
) {
  const [rentalTransactionPDA] = getRentalTransactionPDA(productId, renterPublicKey)
  
  // This would be generated by the Anchor framework
  // For now, we'll return the instruction data structure
  return {
    accounts: {
      rentalTransaction: rentalTransactionPDA,
      renter: renterPublicKey,
      systemProgram: SystemProgram.programId,
    },
    data: {
      productId,
      ownerWallet: ownerWallet.toString(),
      totalAmount,
      rentalStart,
      rentalEnd,
      bookingId,
    },
    programId: getKairoriaProgram(),
  }
}

/**
 * Create payment instruction for rental
 */
export async function createPaymentInstruction(
  connection: Connection,
  renterPublicKey: PublicKey,
  productId: number,
  amount: number
) {
  const [rentalTransactionPDA] = getRentalTransactionPDA(productId, renterPublicKey)
  
  // Get associated token accounts
  const usdcMint = getUSDCMintSingleton()
  const renterTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    renterPublicKey
  )
  
  const escrowTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    rentalTransactionPDA,
    true // Allow PDA as owner
  )
  
  return {
    accounts: {
      rentalTransaction: rentalTransactionPDA,
      escrowTokenAccount,
      renterTokenAccount,
      usdcMint: usdcMint,
      renter: renterPublicKey,
      tokenProgram: TOKEN_PROGRAM_ID,
      associatedTokenProgram: ASSOCIATED_TOKEN_PROGRAM_ID,
      systemProgram: SystemProgram.programId,
    },
    data: {
      amount,
    },
    programId: getKairoriaProgram(),
  }
}

/**
 * Create completion instruction for rental
 */
export async function createCompletionInstruction(
  connection: Connection,
  signerPublicKey: PublicKey,
  productId: number,
  renterPublicKey: PublicKey,
  ownerPublicKey: PublicKey
) {
  const [rentalTransactionPDA] = getRentalTransactionPDA(productId, renterPublicKey)
  const [globalStatePDA] = getGlobalStatePDA()
  const usdcMint = getUSDCMintSingleton()
  const platformAdmin = getPlatformAdmin()
  
  // Get associated token accounts
  const escrowTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    rentalTransactionPDA,
    true
  )
  
  const ownerTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    ownerPublicKey
  )
  
  const adminTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    platformAdmin
  )
  
  return {
    accounts: {
      rentalTransaction: rentalTransactionPDA,
      escrowTokenAccount,
      ownerTokenAccount,
      adminTokenAccount,
      globalState: globalStatePDA,
      usdcMint: usdcMint,
      signer: signerPublicKey,
      tokenProgram: TOKEN_PROGRAM_ID,
    },
    data: {},
    programId: getKairoriaProgram(),
  }
}

/**
 * Create admin intervention instruction
 */
export async function createAdminInterventionInstruction(
  connection: Connection,
  adminPublicKey: PublicKey,
  productId: number,
  renterPublicKey: PublicKey,
  ownerPublicKey: PublicKey,
  ownerPercentage: number,
  renterRefundPercentage: number,
  reason: string
) {
  const [rentalTransactionPDA] = getRentalTransactionPDA(productId, renterPublicKey)
  const [globalStatePDA] = getGlobalStatePDA()
  const usdcMint = getUSDCMintSingleton()
  
  // Get associated token accounts
  const escrowTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    rentalTransactionPDA,
    true
  )
  
  const ownerTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    ownerPublicKey
  )
  
  const renterTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    renterPublicKey
  )
  
  const adminTokenAccount = await getAssociatedTokenAddress(
    usdcMint,
    adminPublicKey
  )
  
  return {
    accounts: {
      rentalTransaction: rentalTransactionPDA,
      escrowTokenAccount,
      ownerTokenAccount,
      renterTokenAccount,
      adminTokenAccount,
      globalState: globalStatePDA,
      usdcMint: usdcMint,
      admin: adminPublicKey,
      tokenProgram: TOKEN_PROGRAM_ID,
    },
    data: {
      ownerPercentage,
      renterRefundPercentage,
      reason,
    },
    programId: getKairoriaProgram(),
  }
}

/**
 * Get rental transaction data from blockchain
 */
export async function getRentalTransactionData(
  connection: Connection,
  productId: number,
  renterPublicKey: PublicKey
) {
  try {
    const [rentalTransactionPDA] = getRentalTransactionPDA(productId, renterPublicKey)
    
    // Get account info from blockchain
    const accountInfo = await connection.getAccountInfo(rentalTransactionPDA)
    
    if (!accountInfo) {
      return null
    }
    
    // This would normally be decoded using the program's IDL
    // For now, we'll return the raw account data
    return {
      address: rentalTransactionPDA.toString(),
      data: accountInfo.data,
      lamports: accountInfo.lamports,
      owner: accountInfo.owner.toString(),
    }
  } catch (error) {
    console.error('Error fetching rental transaction data:', error)
    return null
  }
}

/**
 * Utility function to convert USDC amount to lamports (6 decimal places)
 */
export function usdcToLamports(usdcAmount: number): number {
  return Math.floor(usdcAmount * 1_000_000) // USDC has 6 decimal places
}

/**
 * Utility function to convert lamports to USDC
 */
export function lamportsToUsdc(lamports: number): number {
  return lamports / 1_000_000
}

/**
 * Check if a Solana address is valid
 */
export function isValidSolanaAddress(address: string): boolean {
  try {
    new PublicKey(address)
    return true
  } catch {
    return false
  }
}

/**
 * Generate booking instructions for frontend
 */
export interface BookingInstructions {
  createTransaction: any
  payRental: any
  completeRental: any
  programId: string
  pdas: {
    rentalTransaction: string
    globalState: string
  }
}

export async function generateBookingInstructions(
  connection: Connection,
  productId: number,
  renterPublicKey: PublicKey,
  ownerPublicKey: PublicKey,
  totalAmount: number,
  rentalStart: number,
  rentalEnd: number,
  bookingId: string
): Promise<BookingInstructions> {
  const [rentalTransactionPDA] = getRentalTransactionPDA(productId, renterPublicKey)
  const [globalStatePDA] = getGlobalStatePDA()
  
  const createTransaction = await createRentalTransactionInstruction(
    connection,
    renterPublicKey,
    productId,
    ownerPublicKey,
    totalAmount,
    rentalStart,
    rentalEnd,
    bookingId
  )
  
  const payRental = await createPaymentInstruction(
    connection,
    renterPublicKey,
    productId,
    totalAmount
  )
  
  const completeRental = await createCompletionInstruction(
    connection,
    renterPublicKey,
    productId,
    renterPublicKey,
    ownerPublicKey
  )
  
  return {
    createTransaction,
    payRental,
    completeRental,
    programId: getKairoriaProgram().toString(),
    pdas: {
      rentalTransaction: rentalTransactionPDA.toString(),
      globalState: globalStatePDA.toString(),
    },
  }
}